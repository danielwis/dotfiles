# History
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000

# Options
setopt autocd extendedglob # Don't need "cd" to cd
setopt HIST_IGNORE_DUPS    # Ignore duplicates only if directly after one another
setopt PROMPT_SUBST        # Turn on command substitution in prompt

# Prompt
# Backup: PROMPT='%B%n@%M [%F{226}%T%f]'$'\n''[%2~] %F{2}$(git_branch)%f%b'
PROMPT='%B%F{179}%n@%M%f in %F{9}%2~%f $(git_branch 2 -v)at %F{67}%T%f'$'\n''â†’%b '

# Vim keybind stuff
bindkey -v
bindkey "^[[3~" delete-char
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^?" backward-delete-char

# Something?
zstyle :compinstall filename '/home/daniel/.zshrc'

# Tab completion (incl. exercism)
export fpath=(~/.config/exercism ~/.zsh/completion $fpath)
# Case insensitive tab completion from both "ends" of the word (so "bar" can autocomplete to "foobar").
# Tries to complete the word as typed first, then if it doesn't find a match, tries to ignore case.
# Thanks to https://stackoverflow.com/questions/24226685/have-zsh-return-case-insensitive-auto-complete-matches-but-prefer-exact-matches
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
autoload -Uz compinit && compinit
_comp_options+=(globdots) # Include hidden files

# --- Aliases ---
# General
alias p="sudo pacman"
alias cds='cd $(select_directory)'
alias here='srcfile=$(select_file) && [ $srcfile ] && mv $srcfile .'
alias up='cd ..'
# Git
alias gs="git status"
alias gl="git log --oneline"
# Prettifying
alias ls="ls -ha --color=auto --group-directories-first"
alias grep="grep --color=auto"
alias bat="bat -p --paging=never"
# Other
alias passgen="< /dev/urandom tr -dc '!?#*-_=()/&%'A-Za-z0-9 | head -c 16; echo"
alias testmic="arecord -vvv -f dat /dev/null"

# Environment
export BROWSER="firefox"
export EDITOR="nvim"
export VISUAL="nvim"
# Jellyfin-webos manual installation
export LG_WEBOS_TV_SDK_HOME="$HOME/Documents/"
export WEBOS_CLI_TV="$LG_WEBOS_TV_SDK_HOME/CLI/bin"
# ... and then PATH
export PATH="$PATH:$HOME/scripts:$HOME/bin:$WEBOS_CLI_TV:$HOME/.local/bin"
twmn_path="/home/daniel/Documents/kth/amanuens/en2720/twmn/src/lib/python/"
canvas_path="/home/daniel/Documents/kth/amanuens/en2720/twmn-ctf/lib/python/"
export PYTHONPATH="$PYTHONPATH:$twmn_path:$canvas_path"

# Utility functions
select_any() {
  # See the comment in `select_directory`. The only changes here are on the last line
  find ~ -type d \( \
      \! -name ".config" \
      -a -name ".*" \
      -o -name "google-cloud-sdk" \
      -o -name "node_modules" \
    \) -prune \
    -o -print | fzf
}
select_file() {
  # See the comment in `select_directory`. The only changes here are on the last line
  find ~ -type d \( \
      \! -name ".config" \
      -a -name ".*" \
      -o -name "google-cloud-sdk" \
      -o -name "node_modules" \
    \) -prune \
    -o -type f -print | fzf --preview "bat --style=numbers --color=always --line-range :500 {}"
}
select_directory() {
  # See https://www.theunixschool.com/2012/07/find-command-15-examples-to-exclude.html for more info
  # find all directories in $HOME
      # where the name is not ".config"
      # but starts with a "."
      # or is called one of the following
      # [...]
    # and ignore/don't look inside them
    # print any directories not matched above
  find ~ -type d \( \
      \! -name ".config" \
      -a -name ".*" \
      -o -name "google-cloud-sdk" \
      -o -name "node_modules" \
    \) -prune \
    -o -type d -print | fzf
}

git_branch() {
  # Backup: resp=$(git branch 2> /dev/null | grep \* | sed -e 's/* \(.*\)/(\1) /')
  resp=$(git branch 2>/dev/null | grep \* | sed -e 's/* \(.*\)/\1 /')
  [ "$1" ] && col=$1 || col=2
  col_resp="%F{$col}$resp%f"
  [ "$resp" ] && echo -n "on $col_resp" || echo -n "$col_resp"
}

# Exported functions

mkdirc() {
  mkdir "$1" && cd "$1"
}
export mkdirc

edit() {
  [ -z "$1" ] && fname=$(fzf --preview "bat --style=numbers --color=always --line-range :500 {}") || fname=$1
  [ "$fname" ] && "$EDITOR" "$fname"
}
export edit

move() {
  if [ $# -gt 1 ]; then
    mv "$@"
  elif [ $# = 1 ]; then
    src="$1"
  else
    # Only select source if not already given
    src="$(select_any)"
  fi
  # Always select target
  dest="$(select_directory)"

  # Validate source
  if [ -d "$src" ] || [ -f "$src" ]; then
    # Validate dest and move
    [ -d "$dest" ] && mv -v "$src" "$dest"
  fi
}
export move

# Syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Suggestions
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
# Fuzzy-finding history items (https://github.com/joshskidmore/zsh-fzf-history-search)
source /usr/share/zsh/plugins/zsh-fzf-history-search/zsh-fzf-history-search.zsh

bindkey '^ ' autosuggest-accept
